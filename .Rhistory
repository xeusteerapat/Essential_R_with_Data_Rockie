x * 2
}
my_double(5)
triple <- function(x) {
x * 3
}
triple(6)
cube <- function(x) {
x ** 3
}
cube(4)
# or no need parenthesis
my_triple <- function(x) x * 3
my_triple(5)
power_cube <- function(x, power=3) {
x ** power
}
power_cube(10)
power_cube(10, 4)
roll_dice
roll_dice()
roll_dice <- function(x) {
x + x
}
roll_dice()
roll_dice(x)
# Quiz
roll_dice <- function() {
x <- sample(1:6, size = 1, replace = TRUE)
x + x
}
roll_dice()
roll_dice()
roll_dice()
roll_dice()
roll_dice()
roll_dice()
roll_dice()
roll_dice()
roll_dice()
roll_dice()
roll_dice()
# Quiz
roll_dice <- function() {
x <- sample(1:6, size = 1, replace = TRUE)
y <- sample(1:6, size = 1, replace = TRUE)
x + y
}
roll_dice()
roll_dice()
roll_dice()
roll_dice()
roll_dice()
roll_dice()
roll_dice()
roll_dice()
roll_dice()
roll_dice()
roll_dice()
roll_dice()
roll_dice()
roll_dice()
roll_dice()
roll_dice()
x + y
# Quiz
roll_dice <- function() {
x <- sample(1:6, size = 1, replace = TRUE)
y <- sample(1:6, size = 1, replace = TRUE)
x + y
}
roll_dice()
roll_dice()
roll_dice()
# or you can write by following below
alt_roll_dices <- function() {
score <- sample(1:6, size = 2, replace = TRUE)
sum(score)
}
# or you can write by following below
alt_roll_dices <- function() {
score <- sample(1:6, size = 2, replace = TRUE)
sum(score)
}
alt_roll_dices()
alt_roll_dices()
alt_roll_dices()
alt_roll_dices()
alt_roll_dices()
alt_roll_dices()
install.packages("sqldf")
library(sqldf)
sqldf("SELECT * FROM mtcars WHERE hp < 100;")
sqldf("SELECT hp FROM mtcars WHERE hp > 100;")
sqldf("SELECT * FROM mtcars WHERE disp > 200")
sqldf("SELECT * FROM mtcars WHERE hp > 120")
# SQL in R
query <- sqldf("SELECT * FROM mtcars LIMIT 10")
query
# SQL in R
query <- sqldf("SELECT *
FROM mtcars
WHERE hp < 120")
query
# SQL in R
query <- sqldf("SELECT *
FROM mtcars
WHERE hp < 120
LIMIT 10")
query
# SQL in R
query <- sqldf("SELECT *
FROM mtcars
WHERE hp < 100 AND am = 0
LIMIT 10")
query
query2 <- sqldf("SELECT *
FROM mtcars
WHERE hp < 100 AND am = 0
ORDER BY hp")
query2
query2 <- sqldf("SELECT *
FROM mtcars
WHERE hp < 100
ORDER BY hp")
query2
query2 <- sqldf("SELECT *
FROM mtcars
WHERE hp < 100
ORDER BY hp DESC")
query2
query3 <- sqldf("SELECT mpg, cyl
FROM mtcars
WHERE hp < 100
ORDER BY hp DESC")
query3
query3 <- sqldf("SELECT mpg, wt, hp, am
FROM mtcars
WHERE hp < 100
ORDER BY hp DESC")
query3
FROM mtcars)
query4 <- sqldf("SELECT avg(hp), sum(hp), min(hp), max(hp), count(hp),
FROM mtcars")
query4
query4 <- sqldf("SELECT avg(hp), sum(hp), min(hp), max(hp), count(hp)
FROM mtcars")
query4
query5 <- sqldf("SELECT
avg(hp) AS avg_hp,
sum(hp) AS sum_hp,
min(hp) AS min_hp,
max(hp) AS max_hp,
count(hp)
FROM mtcars")
query5
query5 <- sqldf("SELECT
avg(hp) AS avg_hp,
sum(hp) AS sum_hp,
min(hp) AS min_hp,
max(hp) AS max_hp,
count(hp) n
FROM mtcars")
query5
mtcars
query5 <- sqldf("SELECT
avg(hp) AS avg_hp,
sum(hp) AS sum_hp,
min(hp) AS min_hp,
max(hp) AS max_hp,
count(hp) n,
am
FROM mtcars
GROUP BY am")
query5
# filter by result sets by HAVING
query6 <- sqldf("SELECT
avg(hp) AS avg_hp,
sum(hp) AS sum_hp,
min(hp) AS min_hp,
max(hp) AS max_hp,
count(hp) n,
am
FROM mtcars
GROUP BY am
HAVING sum(hp) > 2000")
query6
install.packages("caret")
library(caret)
install.packages("mlbench")
library(mlbench)
library(tidyverse)
data()
data("BostonHousing")
# Load data sets for regression problem
data("BostonHousing")
View(BostonHousing)
## Explorer data sets
# Checking data
str(BostonHousing)
# Checking missing value
complete.cases(BostonHousing)
mean(complete.cases(BostonHousing))
# Delete missing value
n.omit(BostonHousing)
# Delete missing value
na.omit(BostonHousing)
# Delete missing value
BostonHousing <- na.omit(BostonHousing)
# summarize stats
summary(BostonHousing)
# analytical function apply()
apply(BostonHousing, MARGIN = 2, FUN = mean())
# analytical function apply()
apply(BostonHousing, MARGIN = 2, FUN = mean)
head(BostonHousing)
help(BostonHousing)
# Train test split data sets
n <- nrow(BostonHousing)
n
ncol(BostonHousing)
# random features
sample(n, size = n * 0.8)
# random features for training set
id <- sample(n, size = n * 0.8)
id[1:10]
set.seed(99)
# random features for training set
id <- sample(n, size = n * 0.8)
id[1:10]
id[1:10]
set.seed(99)
# random features for training set
id <- sample(n, size = n * 0.8)
id[1:10]
# train and test data
train_data <- BostonHousing[id, ]
test_data <- BostonHousing[-id, ]
train_data
str(train_data)
nrow(train_data)
nrow(test_data)
set.seed(99)
# Random features for training set
id <- sample(n, size = n * 0.75)
# train and test data
train_data <- BostonHousing[id, ]
test_data <- BostonHousing[-id, ]
# KNN Training model
knn_model <- train(medv ~ .,
data = train_data,
method = "knn")
View(knn_model)
knn_model
# KNN Training model
knn_model <- train(medv ~ rm + crim + tax,
data = train_data,
method = "knn")
knn_model
# KNN Training model
knn_model <- train(medv ~ rm + crim + tax + indus,
data = train_data,
method = "knn")
knn_model
# KNN Testing model
predict_price <- predict(knn_model, newdata = test_data)
predict_price
# K-fold cross validation to customize knn model (may I control model)
ctrl <- trainControl(method = "cv",
number = 5,
verboseIter = TRUE)
# KNN Training model
knn_model <- train(medv ~ rm + crim + tax + indus,
data = train_data,
method = "knn",
trControl = ctrl)
ctrl <- trainControl(method = "cv",
number = 5,
verboseIter = TRUE)
# KNN Training model
knn_model <- train(medv ~ rm + crim + tax + indus,
data = train_data,
method = "knn",
trControl = ctrl)
knn_model
# KNN Testing model
predict_price <- predict(knn_model, newdata = test_data)
predict_price
# Root mean squared
rmse <- sqrt(mean((predict_price - test_data$medv) ** 2))
rmse
class(predict_price)
knn_model
set.seed(99)
ctrl <- trainControl(method = "cv",
number = 5,
verboseIter = TRUE)
# KNN Training model
knn_model <- train(medv ~ rm + crim + tax + indus,
data = train_data,
method = "knn",
trControl = ctrl)
# KNN Testing model
predict_price <- predict(knn_model, newdata = test_data)
# Evalutae model with root mean squared error
rmse <- sqrt(mean((predict_price - test_data$medv) ** 2))
rmse
source('~/R_Playground/essential_r_with_data_rockie/ML_BostonHousing.R')
use warning()
use warnings()
rmse
rmse
# KNN Testing model
predict_price <- predict(knn_model, newdata = test_data)
# Evalutae model with root mean squared error
rmse <- sqrt(mean((predict_price - test_data$medv) ** 2))
rmse
knn_model
regression_model <- train(medv ~ rm + indus + crim,
data = train_data,
method = "lm")
regression_model
# test regression prediction
lm_price_predict <- predict(regression_model, newdata = test_data)
# RMSE Linear Regression
lm_rmse <- sqrt(mean((lm_price_predict - test_data$medv) ** 2))
lm_rmse
regression_model
#
regression_model$finalModel
regression_model <- train(medv ~ rm + indus + crim + zn,
data = train_data,
method = "lm")
# test regression prediction
lm_price_predict <- predict(regression_model, newdata = test_data)
# RMSE Linear Regression
lm_rmse <- sqrt(mean((lm_price_predict - test_data$medv) ** 2))
lm_rmse
#
regression_model$finalModel
# RMSE Linear Regression
RMSE(pred = predict_price, obs = test_data$medv)
source('~/R_Playground/essential_r_with_data_rockie/ML_BostonHousing.R')
#
regression_model$finalModel
#
regression_model$finalModel
regression_model <- train(medv ~ rm + indus + crim + zn + age,
data = train_data,
method = "lm")
# test regression prediction
lm_price_predict <- predict(regression_model, newdata = test_data)
# RMSE Linear Regression
RMSE(pred = predict_price, obs = test_data$medv)
#
regression_model$finalModel
# RMSE Linear Regression
RMSE(pred = predict_price, obs = test_data$medv)
set.seed(99)
# Random features for training set
id <- sample(n, size = n * 0.75)
# train and test data
train_data <- BostonHousing[id, ]
test_data <- BostonHousing[-id, ]
set.seed(99)
# create grid search for k
grid_search <- expand.grid(k = 3:10)
# K-fold cross validation to customize knn model (may I control model)
ctrl <- trainControl(method = "cv",
number = 5,
verboseIter = TRUE)
# KNN Training model
knn_model <- train(medv ~ rm + crim + tax + indus,
data = train_data,
method = "knn",
tuneGrid = grid_search,
trControl = ctrl)
# KNN Testing model
predict_price <- predict(knn_model, newdata = test_data)
# Evalutae model with root mean squared error
rmse <- sqrt(mean((predict_price - test_data$medv) ** 2))
rmse
# Linear Regression
set.seed(99)
regression_model <- train(medv ~ rm + indus + crim + zn + age,
data = train_data,
method = "lm")
# test regression prediction
lm_price_predict <- predict(regression_model, newdata = test_data)
# RMSE Linear Regression
RMSE(pred = predict_price, obs = test_data$medv)
#
regression_model$finalModel
regression_model <- train(medv ~ .,
data = train_data,
method = "lm")
# test regression prediction
lm_price_predict <- predict(regression_model, newdata = test_data)
# RMSE Linear Regression
RMSE(pred = predict_price, obs = test_data$medv)
#
regression_model$finalModel
rm + indus + crim + zn + age
regression_model <- train(medv ~ rm + indus + crim + zn + age,
data = train_data,
method = "lm")
# test regression prediction
lm_price_predict <- predict(regression_model, newdata = test_data)
# RMSE Linear Regression
RMSE(pred = predict_price, obs = test_data$medv)
#
regression_model$finalModel
regression_model <- train(medv ~ rm + indus + crim + zn + age,
data = train_data,
method = "lm")
# test regression prediction
lm_price_predict <- predict(regression_model, newdata = test_data)
# RMSE Linear Regression
RMSE(pred = predict_price, obs = test_data$medv)
#
regression_model$finalModel
# KNN Training model
knn_model <- train(medv ~ .,
data = train_data,
method = "knn",
tuneGrid = grid_search,
trControl = ctrl)
# KNN Testing model
predict_price <- predict(knn_model, newdata = test_data)
# Evalutae model with root mean squared error
rmse <- sqrt(mean((predict_price - test_data$medv) ** 2))
rmse
# Linear Regression
set.seed(99)
regression_model <- train(medv ~ rm + indus + crim + zn + age,
data = train_data,
method = "lm")
regression_model <- train(medv ~ .,
data = train_data,
method = "lm")
# test regression prediction
lm_price_predict <- predict(regression_model, newdata = test_data)
# RMSE Linear Regression
RMSE(pred = predict_price, obs = test_data$medv)
#
regression_model$finalModel
# RMSE Linear Regression
RMSE(pred = predict_price, obs = test_data$medv)
# RMSE Linear Regression
RMSE(pred = lm_predict_price, obs = test_data$medv)
# test regression prediction
lm_price_predict <- predict(regression_model, newdata = test_data)
# RMSE Linear Regression
RMSE(pred = lm_predict_price, obs = test_data$medv)
# RMSE Linear Regression
RMSE(pred = lm_price_predict, obs = test_data$medv)
#
regression_model$finalModel
# test regression prediction
lm_predict_price <- predict(regression_model, newdata = test_data)
# RMSE Linear Regression
RMSE(pred = lm_predict_price, obs = test_data$medv)
rm(lm_price_predict)
# Logistic Regression diabete
library(mlbench)
diabetes <- diabetes
help(diabetes)
data("diabetes")
# Logistic Regression diabete
library(mlbench)
data("diabetes")
data("PimaIndiansDiabetes")
df <- PimaIndiansDiabetes
n <- nrow(df)
set.seed(99)
id <- sample(n, size = n * 0.75)
# Logistic Regression diabete
library(mlbench)
data("PimaIndiansDiabetes")
# train test split
df <- PimaIndiansDiabetes
n <- nrow(df)
set.seed(99)
id <- sample(n, size = n * 0.75)
train_data <- df[id, ]
test_data <- df[-id, ]
df$diabetes
# checking data
table(df$diabetes)
# explorer percentage
table(df$diabetes) / nrow(df)
source('~/.active-rstudio-document')
# accuracy
mean(predict_value == test_data$diabetes)
# accuracy
accuracy <- mean(predict_value == test_data$diabetes)
accuracy
# confusion matrix
table(predict_value, test_data$diabetes, dnn = c("Predict", "Actual"))
(2 * (0.75 + 0.46))/(0.75 + 0.46)
(2 * (0.75 * 0.46))/(0.75 + 0.46)
confusionMatrix(data = predict_value,
reference = test_data$diabetes,
positive = "pos",
mode = "everything")
library(tidyverse)
mpg
# ggplot
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg)
# ggplot
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, color = class))
